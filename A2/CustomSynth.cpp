/*
  ==============================================================================

  This file was generated by JuceDemo, and modified by Derek Halman for CSC344

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

#define MAX_LEVEL 1

AudioProcessor* JUCE_CALLTYPE createPluginFilter();


//==============================================================================
class SineWaveSound : public SynthesiserSound
{
public:
    SineWaveSound() {}

    bool appliesToNote (const int /*midiNoteNumber*/)           { return true; }
    bool appliesToChannel (const int /*midiChannel*/)           { return true; }
};

//==============================================================================

// A simple linear envelope, allows custom parameters
class SynthEnvelope : public ReferenceCountedObject
{
public:
    SynthEnvelope()
        : output (0),
          attackLevel (1),
          attackTime (0),
          decayTime (0),
          sustainLevel (1),
          releaseTime (.1),
          state (ENV_ATTACK),
          sampleRate (0)
    {
        init = false;
    }
    
    SynthEnvelope(double newOutput, double newAttackLevel, double newAttackTime,
                  double newDecayTime, double newSustainLevel, double newReleaseTime,
                  double newSampleRate) {
        output = newOutput;
        attackLevel = newAttackLevel;
        attackTime = newAttackTime;
        decayTime = newDecayTime;
        sustainLevel = newSustainLevel;
        releaseTime = newReleaseTime;
        state = ENV_ATTACK;
        sampleRate = newSampleRate;
        
        initEnvelope();
    }
    
    enum {
        ENV_ATTACK, ENV_DECAY, ENV_SUSTAIN, ENV_RELEASE
    };
    
    // Perform after all initial values have been set.
    void initEnvelope() {
        double cyclesPerSecond = 1 / attackTime;
        double cyclesPerSample = cyclesPerSecond / sampleRate;
        attackDelta = cyclesPerSample;
        decayDelta =  1 / (decayTime * sampleRate);
        releaseDelta = 1 / (releaseTime * sampleRate);
        
        if (sampleRate == 0) {
            std::cout << "Envelope Error: Sample rate not set." << std::endl;
        } else {
            init = true;
        }
        
        // std::cout << "Sample Rate: " << sampleRate << " attackDelta: " << attackDelta << std::endl;
    }
    
    // Must be called before initEnvelope()
    void setSampleRate(double newSampleRate) {
        sampleRate = newSampleRate;
    }
    
    void setState(int newState) {
        state = newState;
    }
    
    void setOutput(double newOutput) {
        output = newOutput;
    }
    
    void setReleaseTime(double newReleaseTime) {
        releaseTime = newReleaseTime;
        releaseDelta = 1 / (releaseTime * sampleRate);
    }
    
    void release() {
        state = ENV_RELEASE;
    }
    
    double getOutput() {
        return output;
    }
    
    int getState() {
        return state;
    }
    
    // Iterates through envelope shape. Returns false when complete.
    bool stepEnvelope() {
        if (!init) {
            initEnvelope();
        }
        
        switch (state) {
            case ENV_ATTACK:
                output += attackDelta;
                
                if (output >= attackLevel) {
                    output = attackLevel;
                    state = ENV_DECAY;
                }
                break;
                
            case ENV_DECAY:
                output -= decayDelta;
                
                if (output <= sustainLevel) {
                    output = sustainLevel;
                    state = ENV_SUSTAIN;
                }
                break;
                
            case ENV_SUSTAIN:
                // Do nothing really
                break;
                
            case ENV_RELEASE:
                output -= releaseDelta;
                
                if (output <= 0) {
                    output = 0;
                    
                    // We're done here
                    return false;
                }
                break;
                
            default:
                break;
        }
        
        return true;
    }
    
private:
    double output, attackLevel, attackTime, decayTime, sustainLevel, releaseTime;
    double attackDelta, decayDelta, releaseDelta;
    int state;
    double sampleRate;
    bool init = false;
};

/* A simple demo synth voice that just plays a little more than a sine wave.. */
class SineWaveVoice  : public SynthesiserVoice
{
public:
    SineWaveVoice()
        : angleDelta (0.0),
          tailOff (0.0),
          angleDelta1 (0.0),
          angleDelta2 (0.0),
          lfoDelta (0)
    {
        if (!env) {
            env = new SynthEnvelope();
            env1 = new SynthEnvelope();
            env->setSampleRate(getSampleRate());
            env1->setSampleRate(getSampleRate());
            
            // Init last (Requires sample rate and env times to be set).
            env->initEnvelope();
            env1->initEnvelope();
        }
    }
    
    SynthEnvelope *env = nullptr;
    SynthEnvelope *env1 = nullptr;
    
    bool canPlaySound (SynthesiserSound* sound)
    {
        return dynamic_cast <SineWaveSound*> (sound) != 0;
    }
    
    void modifyLfo(double lfoPerSecond, double *lfoDelta) {
        double lfoPerSample = lfoPerSecond / getSampleRate();
        *lfoDelta = lfoPerSample * 2.0 * double_Pi;
    }
    

    void startNote (int midiNoteNumber, float velocity,
                    SynthesiserSound* /*sound*/, int /*currentPitchWheelPosition*/)
    {
        currentAngle = currentAngle1 = currentAngle2 = lfoAngle = 0.0;
        level = .7;
        tailOff = 0.0;
        midiNumber = midiNoteNumber;
        
        aLevel = MAX_LEVEL;
        sLevel = MAX_LEVEL;
        
        // env is output envelope
        env->setOutput(0);
        env->setState(0);
        env->setReleaseTime(.2);
        
        // env1 fires release over and over for a "diving" effect
        env1->setReleaseTime(2);
        env1->setOutput(1);
        env1->release();
        
        //currentAngle2 = 90;

        // Pure sine-wave bass note (midi# between 36 and 48) matches fundamental
        double cyclesPerSecond = MidiMessage::getMidiNoteInHertz(36 + midiNoteNumber % 24);
        double cyclesPerSample = cyclesPerSecond / getSampleRate();
        angleDelta = cyclesPerSample * 2.0 * double_Pi;
        
        // Fundamental note
        double cyclesPerSecond1 = MidiMessage::getMidiNoteInHertz(midiNoteNumber);
        double cyclesPerSample1 = cyclesPerSecond1 / getSampleRate();
        angleDelta1 = cyclesPerSample1 * 2.0 * double_Pi;
        
        // Saw wave
        double cyclesPerSecond2 = MidiMessage::getMidiNoteInHertz(midiNoteNumber);
        angleDelta2 = cyclesPerSecond2 / getSampleRate();
        
        // LFO
        lfoPerSecond = 8;
        double lfoPerSample = lfoPerSecond / getSampleRate();
        lfoDelta = lfoPerSample * 2.0 * double_Pi;
        
        // Debug
        std::cout << "Notes: " <<
         48 + midiNoteNumber % 12 << " " <<
         midiNoteNumber << " " <<
         midiNoteNumber + 6;
        std::cout << " Frequency: " <<
         cyclesPerSecond << " " <<
         cyclesPerSecond1 << " " <<
         cyclesPerSecond2 << std::endl;
        std::cout << "LFO: " << lfoPerSecond << " Delta: " << lfoDelta << std::endl;
    }

    void stopNote (bool allowTailOff) {
        env->release();
    }

    void pitchWheelMoved (int /*newValue*/)
    {
        // can't be bothered implementing when I don't have one!
    }

    void controllerMoved (int /*controllerNumber*/, int /*newValue*/)
    {
        // Not implemented. Vinyl RULES.
    }

    void renderNextBlock (AudioSampleBuffer& outputBuffer, int startSample, int numSamples)
    {
        if (angleDelta != 0.0)
        {
                while (--numSamples >= 0)
                {
                   // Sum 3 oscillator outputs
                    const float currentSample =
                     (float) (sin (currentAngle) +
                              sin (currentAngle1) * env1->getOutput() +
                              sin (currentAngle2) * (1 - env1->getOutput())
                              ) * env->getOutput();

                    for (int i = outputBuffer.getNumChannels(); --i >= 0;)
                        *outputBuffer.getSampleData(i, startSample) += currentSample;

                    // Increment oscillators
                    lfoAngle += lfoDelta;

                    currentAngle += angleDelta +
                                    (1 + sin(lfoAngle)) * .005 * env1->getOutput();
                    
                    currentAngle1 += angleDelta1 * env1->getOutput();
                    
                    currentAngle2 += angleDelta2 * env1->getOutput() / 2;

                    if (currentAngle2 >= level / 4) {
                        currentAngle2 = level / 4 * -1;
                    }

                    // Push the envelope
                    env->stepEnvelope();
                    env1->stepEnvelope();

                    // And mess with the lfo
                    modifyLfo((1 - env1->getOutput()) * lfoPerSecond, &lfoDelta);
                    ++startSample;
                }
            
        }
        
        // Note is done playing when output is 0 and envelope is in release
        if (env->getState() == env->ENV_RELEASE && env->getOutput() <= 0) {
            clearCurrentNote();
            angleDelta = 0.0;
        }
    }

private:
    double currentAngle, angleDelta, level, tailOff;
    double currentAngle1, angleDelta1;
    double currentAngle2, angleDelta2;
    double lfoPerSecond, lfoAngle, lfoDelta;
    double envLevel, aLevel, aTime, dTime, sLevel, rTime;
    int envState;
    int midiNumber;
};

const float defaultGain = 1.0f;
const float defaultDelay = 0.5f;

//==============================================================================
JuceDemoPluginAudioProcessor::JuceDemoPluginAudioProcessor()
    : delayBuffer (2, 12000)
{
    // Set up some default values..
    gain = defaultGain;
    delay = defaultDelay;

    lastUIWidth = 400;
    lastUIHeight = 200;

    lastPosInfo.resetToDefault();
    delayPosition = 0;

    // Initialise the synth...
    for (int i = 4; --i >= 0;)
        synth.addVoice (new SineWaveVoice());   // These voices will play our custom sine-wave sounds..

    synth.addSound (new SineWaveSound());
}

JuceDemoPluginAudioProcessor::~JuceDemoPluginAudioProcessor()
{
}

//==============================================================================
int JuceDemoPluginAudioProcessor::getNumParameters()
{
    return totalNumParams;
}

float JuceDemoPluginAudioProcessor::getParameter (int index)
{
    // This method will be called by the host, probably on the audio thread, so
    // it's absolutely time-critical. Don't use critical sections or anything
    // UI-related, or anything at all that may block in any way!
    switch (index)
    {
        case gainParam:     return 0;
        case delayParam:    return 0;
        default:            return 0.0f;
    }
}

void JuceDemoPluginAudioProcessor::setParameter (int index, float newValue)
{
    // This method will be called by the host, probably on the audio thread, so
    // it's absolutely time-critical. Don't use critical sections or anything
    // UI-related, or anything at all that may block in any way!
    switch (index)
    {
        case gainParam:     gain = newValue;  break;
        case delayParam:    delay = newValue;  break;
        default:            break;
    }
}

float JuceDemoPluginAudioProcessor::getParameterDefaultValue (int index)
{
    switch (index)
    {
        case gainParam:     return defaultGain;
        case delayParam:    return defaultDelay;
        default:            break;
    }

    return 0.0f;
}

const String JuceDemoPluginAudioProcessor::getParameterName (int index)
{
    switch (index)
    {
        case gainParam:     return "gain";
        case delayParam:    return "delay";
        default:            break;
    }

    return String::empty;
}

const String JuceDemoPluginAudioProcessor::getParameterText (int index)
{
    return String (getParameter (index), 2);
}

//==============================================================================
void JuceDemoPluginAudioProcessor::prepareToPlay (double sampleRate, int /*samplesPerBlock*/)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    synth.setCurrentPlaybackSampleRate (sampleRate);
    keyboardState.reset();
    delayBuffer.clear();
}

void JuceDemoPluginAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
    keyboardState.reset();
}

void JuceDemoPluginAudioProcessor::reset()
{
    // Use this method as the place to clear any delay lines, buffers, etc, as it
    // means there's been a break in the audio's continuity.
    delayBuffer.clear();
}

void JuceDemoPluginAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const int numSamples = buffer.getNumSamples();
    int channel;
    //int dp = 0;

    // Go through the incoming data, and apply our gain to it...
    for (channel = 0; channel < getNumInputChannels(); ++channel)
        buffer.applyGain (channel, 0, buffer.getNumSamples(), gain);

    // Now pass any incoming midi messages to our keyboard state object, and let it
    // add messages to the buffer if the user is clicking on the on-screen keys
    keyboardState.processNextMidiBuffer (midiMessages, 0, numSamples, true);

    // and now get the synth to process these midi events and generate its output.
    synth.renderNextBlock (buffer, midiMessages, 0, numSamples);

    // Apply our delay effect to the new output..
    /*
    for (channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getSampleData (channel);
        float* delayData = delayBuffer.getSampleData (jmin (channel, delayBuffer.getNumChannels() - 1));
        dp = delayPosition;

        for (int i = 0; i < numSamples; ++i)
        {
            const float in = channelData[i];
            channelData[i] += delayData[dp];
            delayData[dp] = (delayData[dp] + in) * delay;
            if (++dp >= delayBuffer.getNumSamples())
                dp = 0;
        }
    }

    delayPosition = dp;
     */

    // In case we have more outputs than inputs, we'll clear any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // ask the host for the current time so we can display it...
    AudioPlayHead::CurrentPositionInfo newTime;

    if (getPlayHead() != nullptr && getPlayHead()->getCurrentPosition (newTime))
    {
        // Successfully got the current time from the host..
        lastPosInfo = newTime;
    }
    else
    {
        // If the host fails to fill-in the current time, we'll just clear it to a default..
        lastPosInfo.resetToDefault();
    }
}

//==============================================================================
AudioProcessorEditor* JuceDemoPluginAudioProcessor::createEditor()
{
    return new JuceDemoPluginAudioProcessorEditor (this);
}

//==============================================================================
void JuceDemoPluginAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // Here's an example of how you can use XML to make it easy and more robust:

    // Create an outer XML element..
    XmlElement xml ("MYPLUGINSETTINGS");

    // add some attributes to it..
    xml.setAttribute ("uiWidth", lastUIWidth);
    xml.setAttribute ("uiHeight", lastUIHeight);
    xml.setAttribute ("gain", gain);
    xml.setAttribute ("delay", delay);

    // then use this helper function to stuff it into the binary blob and return it..
    copyXmlToBinary (xml, destData);
}

void JuceDemoPluginAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.

    // This getXmlFromBinary() helper function retrieves our XML from the binary blob..
    ScopedPointer<XmlElement> xmlState (getXmlFromBinary (data, sizeInBytes));

    if (xmlState != nullptr)
    {
        // make sure that it's actually our type of XML object..
        if (xmlState->hasTagName ("MYPLUGINSETTINGS"))
        {
            // ok, now pull out our parameters..
            lastUIWidth  = xmlState->getIntAttribute ("uiWidth", lastUIWidth);
            lastUIHeight = xmlState->getIntAttribute ("uiHeight", lastUIHeight);

            gain  = (float) xmlState->getDoubleAttribute ("gain", gain);
            delay = (float) xmlState->getDoubleAttribute ("delay", delay);
        }
    }
}

const String JuceDemoPluginAudioProcessor::getInputChannelName (const int channelIndex) const
{
    return String (channelIndex + 1);
}

const String JuceDemoPluginAudioProcessor::getOutputChannelName (const int channelIndex) const
{
    return String (channelIndex + 1);
}

bool JuceDemoPluginAudioProcessor::isInputChannelStereoPair (int /*index*/) const
{
    return true;
}

bool JuceDemoPluginAudioProcessor::isOutputChannelStereoPair (int /*index*/) const
{
    return true;
}

bool JuceDemoPluginAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool JuceDemoPluginAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool JuceDemoPluginAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double JuceDemoPluginAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new JuceDemoPluginAudioProcessor();
}
